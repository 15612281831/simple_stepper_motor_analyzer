// Auto generated lookup tables to drive the 16 bit parallel output
// to the TFT.

#include "bssr_tables.h"

namespace bssr_tables {

// Generated with the following Java program:

//
// public class NewBssrMasksGenerator {
//
//    // Include here all port that output Data bits.
//    enum Port {
//        A,
//        B
//    }
//
//    // A port pin identifier.
//    static class Pin {
//        final Port port;
//        final int pin_index;  // MSB=15, LSB=0;
//
//        public Pin(Port port, int pin_index) {
//            this.port = port;
//            this.pin_index = pin_index;
//        }
//
//        public String toString() {
//            return "P" + port.name() + pin_index;
//        }
//    }
//
//    // In addition to the 16 bit parallel data, we also
//    // want to reset the WR pin.
//    static final Pin WR_PIN = new Pin(Port.A, 0);
//
//    // Maps the 16 data bit index to pin.
//    static final Pin[] DATA_PINS = new Pin[]{
//            new Pin(Port.B, 12),  // D0
//            new Pin(Port.B, 13),  // D1
//            new Pin(Port.B, 14),  // D2
//            new Pin(Port.B, 15),  // D3
//
//            new Pin(Port.B, 10),  // D4
//            new Pin(Port.A, 9),   // D5
//            new Pin(Port.A, 10),  // D6
//            new Pin(Port.A, 7),   // D7
//
//            new Pin(Port.A, 6),   // D8
//            new Pin(Port.A, 5),   // D9
//            new Pin(Port.A, 15),  // D10
//            new Pin(Port.A, 4),   // D11
//
//            new Pin(Port.A, 3),   // D12
//            new Pin(Port.B, 4),   // D13
//            new Pin(Port.A, 2),   // D14
//            new Pin(Port.B, 5),   // D15
//    };
//
//
//    // Maps a color value from src_bits to dst_bits.
//    private static int resize_color_channel(int srv_val, int src_bits, int
//    dst_bits) {
//        final double ratio = (double) srv_val / ((1 << src_bits) - 1);
//        final long result = Math.round(((1 << dst_bits) - 1) * ratio);
//        return (int) result;
//    }
//
//    // Map a 8 bit rgb332 color to 16 bit rgb565 color.
//    private static int color8_to_color16(int c8) {
//        final int r3 = (c8 >> 5) & 0x7;
//        final int g3 = (c8 >> 2) & 0x7;
//        final int b2 = c8 & 0x3;
//
//        final int r5 = resize_color_channel(r3, 3, 5);
//        final int g6 = resize_color_channel(g3, 3, 6);
//        final int b5 = resize_color_channel(b2, 2, 5);
//
//        final int rgb565 = r5 << 11 | g6 << 5 | b5;
//        return rgb565;
//    }
//
//    // Given a 16 bits data value and a port, returns the BSSR mask to set
//    // the pins of that port.
//    private static long value_to_bssr_mask(int uint16_value, Port port) {
//        // If WR is on this port, we return a mask that resets it.
//        long bssr_bits = (port == WR_PIN.port) ? 1l << (WR_PIN.pin_index + 16)
//        : 0; for (int bit = 0; bit < 16; bit++) {
//            if (DATA_PINS[bit].port != port) {
//                continue;
//            }
//            final int pin_index = DATA_PINS[bit].pin_index;
//            if ((uint16_value & (1 << bit)) == 0) {
//                bssr_bits |= 1l << (pin_index + 16);  // set pin low
//            } else {
//                // Mark for high level
//                bssr_bits |= 1l << pin_index;  // set pin high
//            }
//        }
//        return bssr_bits;
//    }
//
//    // A common method to output the table data.
//    private static void generate_table_data(int uint16_values[], String
//    table_name_prefix, Port port) {
//        System.out.printf("const uint32_t %s_port_%s[] = {\n",
//        table_name_prefix, port.name().toLowerCase()); for (int i = 0; i <
//        256; i++) {
//            long bssr_mask = value_to_bssr_mask(uint16_values[i], port);
//            System.out.printf("0x%08x,", bssr_mask);
//            if (i % 4 == 3) {
//                System.out.printf("  // 0x%02x - 0x%02x\n", i - 3, i);
//            }
//        }
//        System.out.println("};");
//    }
//
//    // Direct output table. No color mapping. Needed for TFT commands.
//    private static void generate_direct_table(Port port) {
//        int values[] = new int[256];
//        for (int i = 0; i < 256; i++) {
//            values[i] = i;
//        }
//        generate_table_data(values, "direct_bssr_table", port);
//    }
//
//    // Output of color16 mapped from color8.
//    private static void generate_color_table(Port port) {
//        int values[] = new int[256];
//        for (int i = 0; i < 256; i++) {
//            values[i] = color8_to_color16(i);;
//        }
//        generate_table_data(values, "color_bssr_table", port);
//    }
//
//    public static void main(String ignored[]) {
//        System.out.println("// Pin map:");
//        System.out.printf("//   WR    %4s\n", WR_PIN);
//        for (int i = 0; i < 16; i++) {
//            System.out.printf("//   D%-2d   %4s\n" , i, DATA_PINS[i]);
//        }
//        for (Port port : Port.values()) {
//            System.out.println();
//            generate_direct_table(port);
//        }
//        for (Port port : Port.values()) {
//            System.out.println();
//            generate_color_table(port);
//        }
//    }
//}

// Pin map:
//   WR     PA0
//   D0    PB12
//   D1    PB13
//   D2    PB14
//   D3    PB15
//   D4    PB10
//   D5     PA9
//   D6    PA10
//   D7     PA7
//   D8     PA6
//   D9     PA5
//   D10   PA15
//   D11    PA4
//   D12    PA3
//   D13    PB4
//   D14    PA2
//   D15    PB5

const uint32_t direct_bssr_table_port_a[] = {
    0x86fd0000, 0x86fd0000, 0x86fd0000, 0x86fd0000,  // 0x00 - 0x03
    0x86fd0000, 0x86fd0000, 0x86fd0000, 0x86fd0000,  // 0x04 - 0x07
    0x86fd0000, 0x86fd0000, 0x86fd0000, 0x86fd0000,  // 0x08 - 0x0b
    0x86fd0000, 0x86fd0000, 0x86fd0000, 0x86fd0000,  // 0x0c - 0x0f
    0x86fd0000, 0x86fd0000, 0x86fd0000, 0x86fd0000,  // 0x10 - 0x13
    0x86fd0000, 0x86fd0000, 0x86fd0000, 0x86fd0000,  // 0x14 - 0x17
    0x86fd0000, 0x86fd0000, 0x86fd0000, 0x86fd0000,  // 0x18 - 0x1b
    0x86fd0000, 0x86fd0000, 0x86fd0000, 0x86fd0000,  // 0x1c - 0x1f
    0x84fd0200, 0x84fd0200, 0x84fd0200, 0x84fd0200,  // 0x20 - 0x23
    0x84fd0200, 0x84fd0200, 0x84fd0200, 0x84fd0200,  // 0x24 - 0x27
    0x84fd0200, 0x84fd0200, 0x84fd0200, 0x84fd0200,  // 0x28 - 0x2b
    0x84fd0200, 0x84fd0200, 0x84fd0200, 0x84fd0200,  // 0x2c - 0x2f
    0x84fd0200, 0x84fd0200, 0x84fd0200, 0x84fd0200,  // 0x30 - 0x33
    0x84fd0200, 0x84fd0200, 0x84fd0200, 0x84fd0200,  // 0x34 - 0x37
    0x84fd0200, 0x84fd0200, 0x84fd0200, 0x84fd0200,  // 0x38 - 0x3b
    0x84fd0200, 0x84fd0200, 0x84fd0200, 0x84fd0200,  // 0x3c - 0x3f
    0x82fd0400, 0x82fd0400, 0x82fd0400, 0x82fd0400,  // 0x40 - 0x43
    0x82fd0400, 0x82fd0400, 0x82fd0400, 0x82fd0400,  // 0x44 - 0x47
    0x82fd0400, 0x82fd0400, 0x82fd0400, 0x82fd0400,  // 0x48 - 0x4b
    0x82fd0400, 0x82fd0400, 0x82fd0400, 0x82fd0400,  // 0x4c - 0x4f
    0x82fd0400, 0x82fd0400, 0x82fd0400, 0x82fd0400,  // 0x50 - 0x53
    0x82fd0400, 0x82fd0400, 0x82fd0400, 0x82fd0400,  // 0x54 - 0x57
    0x82fd0400, 0x82fd0400, 0x82fd0400, 0x82fd0400,  // 0x58 - 0x5b
    0x82fd0400, 0x82fd0400, 0x82fd0400, 0x82fd0400,  // 0x5c - 0x5f
    0x80fd0600, 0x80fd0600, 0x80fd0600, 0x80fd0600,  // 0x60 - 0x63
    0x80fd0600, 0x80fd0600, 0x80fd0600, 0x80fd0600,  // 0x64 - 0x67
    0x80fd0600, 0x80fd0600, 0x80fd0600, 0x80fd0600,  // 0x68 - 0x6b
    0x80fd0600, 0x80fd0600, 0x80fd0600, 0x80fd0600,  // 0x6c - 0x6f
    0x80fd0600, 0x80fd0600, 0x80fd0600, 0x80fd0600,  // 0x70 - 0x73
    0x80fd0600, 0x80fd0600, 0x80fd0600, 0x80fd0600,  // 0x74 - 0x77
    0x80fd0600, 0x80fd0600, 0x80fd0600, 0x80fd0600,  // 0x78 - 0x7b
    0x80fd0600, 0x80fd0600, 0x80fd0600, 0x80fd0600,  // 0x7c - 0x7f
    0x867d0080, 0x867d0080, 0x867d0080, 0x867d0080,  // 0x80 - 0x83
    0x867d0080, 0x867d0080, 0x867d0080, 0x867d0080,  // 0x84 - 0x87
    0x867d0080, 0x867d0080, 0x867d0080, 0x867d0080,  // 0x88 - 0x8b
    0x867d0080, 0x867d0080, 0x867d0080, 0x867d0080,  // 0x8c - 0x8f
    0x867d0080, 0x867d0080, 0x867d0080, 0x867d0080,  // 0x90 - 0x93
    0x867d0080, 0x867d0080, 0x867d0080, 0x867d0080,  // 0x94 - 0x97
    0x867d0080, 0x867d0080, 0x867d0080, 0x867d0080,  // 0x98 - 0x9b
    0x867d0080, 0x867d0080, 0x867d0080, 0x867d0080,  // 0x9c - 0x9f
    0x847d0280, 0x847d0280, 0x847d0280, 0x847d0280,  // 0xa0 - 0xa3
    0x847d0280, 0x847d0280, 0x847d0280, 0x847d0280,  // 0xa4 - 0xa7
    0x847d0280, 0x847d0280, 0x847d0280, 0x847d0280,  // 0xa8 - 0xab
    0x847d0280, 0x847d0280, 0x847d0280, 0x847d0280,  // 0xac - 0xaf
    0x847d0280, 0x847d0280, 0x847d0280, 0x847d0280,  // 0xb0 - 0xb3
    0x847d0280, 0x847d0280, 0x847d0280, 0x847d0280,  // 0xb4 - 0xb7
    0x847d0280, 0x847d0280, 0x847d0280, 0x847d0280,  // 0xb8 - 0xbb
    0x847d0280, 0x847d0280, 0x847d0280, 0x847d0280,  // 0xbc - 0xbf
    0x827d0480, 0x827d0480, 0x827d0480, 0x827d0480,  // 0xc0 - 0xc3
    0x827d0480, 0x827d0480, 0x827d0480, 0x827d0480,  // 0xc4 - 0xc7
    0x827d0480, 0x827d0480, 0x827d0480, 0x827d0480,  // 0xc8 - 0xcb
    0x827d0480, 0x827d0480, 0x827d0480, 0x827d0480,  // 0xcc - 0xcf
    0x827d0480, 0x827d0480, 0x827d0480, 0x827d0480,  // 0xd0 - 0xd3
    0x827d0480, 0x827d0480, 0x827d0480, 0x827d0480,  // 0xd4 - 0xd7
    0x827d0480, 0x827d0480, 0x827d0480, 0x827d0480,  // 0xd8 - 0xdb
    0x827d0480, 0x827d0480, 0x827d0480, 0x827d0480,  // 0xdc - 0xdf
    0x807d0680, 0x807d0680, 0x807d0680, 0x807d0680,  // 0xe0 - 0xe3
    0x807d0680, 0x807d0680, 0x807d0680, 0x807d0680,  // 0xe4 - 0xe7
    0x807d0680, 0x807d0680, 0x807d0680, 0x807d0680,  // 0xe8 - 0xeb
    0x807d0680, 0x807d0680, 0x807d0680, 0x807d0680,  // 0xec - 0xef
    0x807d0680, 0x807d0680, 0x807d0680, 0x807d0680,  // 0xf0 - 0xf3
    0x807d0680, 0x807d0680, 0x807d0680, 0x807d0680,  // 0xf4 - 0xf7
    0x807d0680, 0x807d0680, 0x807d0680, 0x807d0680,  // 0xf8 - 0xfb
    0x807d0680, 0x807d0680, 0x807d0680, 0x807d0680,  // 0xfc - 0xff
};

const uint32_t direct_bssr_table_port_b[] = {
    0xf4300000, 0xe4301000, 0xd4302000, 0xc4303000,  // 0x00 - 0x03
    0xb4304000, 0xa4305000, 0x94306000, 0x84307000,  // 0x04 - 0x07
    0x74308000, 0x64309000, 0x5430a000, 0x4430b000,  // 0x08 - 0x0b
    0x3430c000, 0x2430d000, 0x1430e000, 0x0430f000,  // 0x0c - 0x0f
    0xf0300400, 0xe0301400, 0xd0302400, 0xc0303400,  // 0x10 - 0x13
    0xb0304400, 0xa0305400, 0x90306400, 0x80307400,  // 0x14 - 0x17
    0x70308400, 0x60309400, 0x5030a400, 0x4030b400,  // 0x18 - 0x1b
    0x3030c400, 0x2030d400, 0x1030e400, 0x0030f400,  // 0x1c - 0x1f
    0xf4300000, 0xe4301000, 0xd4302000, 0xc4303000,  // 0x20 - 0x23
    0xb4304000, 0xa4305000, 0x94306000, 0x84307000,  // 0x24 - 0x27
    0x74308000, 0x64309000, 0x5430a000, 0x4430b000,  // 0x28 - 0x2b
    0x3430c000, 0x2430d000, 0x1430e000, 0x0430f000,  // 0x2c - 0x2f
    0xf0300400, 0xe0301400, 0xd0302400, 0xc0303400,  // 0x30 - 0x33
    0xb0304400, 0xa0305400, 0x90306400, 0x80307400,  // 0x34 - 0x37
    0x70308400, 0x60309400, 0x5030a400, 0x4030b400,  // 0x38 - 0x3b
    0x3030c400, 0x2030d400, 0x1030e400, 0x0030f400,  // 0x3c - 0x3f
    0xf4300000, 0xe4301000, 0xd4302000, 0xc4303000,  // 0x40 - 0x43
    0xb4304000, 0xa4305000, 0x94306000, 0x84307000,  // 0x44 - 0x47
    0x74308000, 0x64309000, 0x5430a000, 0x4430b000,  // 0x48 - 0x4b
    0x3430c000, 0x2430d000, 0x1430e000, 0x0430f000,  // 0x4c - 0x4f
    0xf0300400, 0xe0301400, 0xd0302400, 0xc0303400,  // 0x50 - 0x53
    0xb0304400, 0xa0305400, 0x90306400, 0x80307400,  // 0x54 - 0x57
    0x70308400, 0x60309400, 0x5030a400, 0x4030b400,  // 0x58 - 0x5b
    0x3030c400, 0x2030d400, 0x1030e400, 0x0030f400,  // 0x5c - 0x5f
    0xf4300000, 0xe4301000, 0xd4302000, 0xc4303000,  // 0x60 - 0x63
    0xb4304000, 0xa4305000, 0x94306000, 0x84307000,  // 0x64 - 0x67
    0x74308000, 0x64309000, 0x5430a000, 0x4430b000,  // 0x68 - 0x6b
    0x3430c000, 0x2430d000, 0x1430e000, 0x0430f000,  // 0x6c - 0x6f
    0xf0300400, 0xe0301400, 0xd0302400, 0xc0303400,  // 0x70 - 0x73
    0xb0304400, 0xa0305400, 0x90306400, 0x80307400,  // 0x74 - 0x77
    0x70308400, 0x60309400, 0x5030a400, 0x4030b400,  // 0x78 - 0x7b
    0x3030c400, 0x2030d400, 0x1030e400, 0x0030f400,  // 0x7c - 0x7f
    0xf4300000, 0xe4301000, 0xd4302000, 0xc4303000,  // 0x80 - 0x83
    0xb4304000, 0xa4305000, 0x94306000, 0x84307000,  // 0x84 - 0x87
    0x74308000, 0x64309000, 0x5430a000, 0x4430b000,  // 0x88 - 0x8b
    0x3430c000, 0x2430d000, 0x1430e000, 0x0430f000,  // 0x8c - 0x8f
    0xf0300400, 0xe0301400, 0xd0302400, 0xc0303400,  // 0x90 - 0x93
    0xb0304400, 0xa0305400, 0x90306400, 0x80307400,  // 0x94 - 0x97
    0x70308400, 0x60309400, 0x5030a400, 0x4030b400,  // 0x98 - 0x9b
    0x3030c400, 0x2030d400, 0x1030e400, 0x0030f400,  // 0x9c - 0x9f
    0xf4300000, 0xe4301000, 0xd4302000, 0xc4303000,  // 0xa0 - 0xa3
    0xb4304000, 0xa4305000, 0x94306000, 0x84307000,  // 0xa4 - 0xa7
    0x74308000, 0x64309000, 0x5430a000, 0x4430b000,  // 0xa8 - 0xab
    0x3430c000, 0x2430d000, 0x1430e000, 0x0430f000,  // 0xac - 0xaf
    0xf0300400, 0xe0301400, 0xd0302400, 0xc0303400,  // 0xb0 - 0xb3
    0xb0304400, 0xa0305400, 0x90306400, 0x80307400,  // 0xb4 - 0xb7
    0x70308400, 0x60309400, 0x5030a400, 0x4030b400,  // 0xb8 - 0xbb
    0x3030c400, 0x2030d400, 0x1030e400, 0x0030f400,  // 0xbc - 0xbf
    0xf4300000, 0xe4301000, 0xd4302000, 0xc4303000,  // 0xc0 - 0xc3
    0xb4304000, 0xa4305000, 0x94306000, 0x84307000,  // 0xc4 - 0xc7
    0x74308000, 0x64309000, 0x5430a000, 0x4430b000,  // 0xc8 - 0xcb
    0x3430c000, 0x2430d000, 0x1430e000, 0x0430f000,  // 0xcc - 0xcf
    0xf0300400, 0xe0301400, 0xd0302400, 0xc0303400,  // 0xd0 - 0xd3
    0xb0304400, 0xa0305400, 0x90306400, 0x80307400,  // 0xd4 - 0xd7
    0x70308400, 0x60309400, 0x5030a400, 0x4030b400,  // 0xd8 - 0xdb
    0x3030c400, 0x2030d400, 0x1030e400, 0x0030f400,  // 0xdc - 0xdf
    0xf4300000, 0xe4301000, 0xd4302000, 0xc4303000,  // 0xe0 - 0xe3
    0xb4304000, 0xa4305000, 0x94306000, 0x84307000,  // 0xe4 - 0xe7
    0x74308000, 0x64309000, 0x5430a000, 0x4430b000,  // 0xe8 - 0xeb
    0x3430c000, 0x2430d000, 0x1430e000, 0x0430f000,  // 0xec - 0xef
    0xf0300400, 0xe0301400, 0xd0302400, 0xc0303400,  // 0xf0 - 0xf3
    0xb0304400, 0xa0305400, 0x90306400, 0x80307400,  // 0xf4 - 0xf7
    0x70308400, 0x60309400, 0x5030a400, 0x4030b400,  // 0xf8 - 0xfb
    0x3030c400, 0x2030d400, 0x1030e400, 0x0030f400,  // 0xfc - 0xff
};

const uint32_t color_bssr_table_port_a[] = {
    0x86fd0000, 0x86fd0000, 0x86fd0000, 0x86fd0000,  // 0x00 - 0x03
    0x84bd0240, 0x84bd0240, 0x84bd0240, 0x84bd0240,  // 0x04 - 0x07
    0x82dd0420, 0x82dd0420, 0x82dd0420, 0x82dd0420,  // 0x08 - 0x0b
    0x809d0660, 0x809d0660, 0x809d0660, 0x809d0660,  // 0x0c - 0x0f
    0x067d8080, 0x067d8080, 0x067d8080, 0x067d8080,  // 0x10 - 0x13
    0x043d82c0, 0x043d82c0, 0x043d82c0, 0x043d82c0,  // 0x14 - 0x17
    0x025d84a0, 0x025d84a0, 0x025d84a0, 0x025d84a0,  // 0x18 - 0x1b
    0x001d86e0, 0x001d86e0, 0x001d86e0, 0x001d86e0,  // 0x1c - 0x1f
    0x86fd0000, 0x86fd0000, 0x86fd0000, 0x86fd0000,  // 0x20 - 0x23
    0x84bd0240, 0x84bd0240, 0x84bd0240, 0x84bd0240,  // 0x24 - 0x27
    0x82dd0420, 0x82dd0420, 0x82dd0420, 0x82dd0420,  // 0x28 - 0x2b
    0x809d0660, 0x809d0660, 0x809d0660, 0x809d0660,  // 0x2c - 0x2f
    0x067d8080, 0x067d8080, 0x067d8080, 0x067d8080,  // 0x30 - 0x33
    0x043d82c0, 0x043d82c0, 0x043d82c0, 0x043d82c0,  // 0x34 - 0x37
    0x025d84a0, 0x025d84a0, 0x025d84a0, 0x025d84a0,  // 0x38 - 0x3b
    0x001d86e0, 0x001d86e0, 0x001d86e0, 0x001d86e0,  // 0x3c - 0x3f
    0x86e90014, 0x86e90014, 0x86e90014, 0x86e90014,  // 0x40 - 0x43
    0x84a90254, 0x84a90254, 0x84a90254, 0x84a90254,  // 0x44 - 0x47
    0x82c90434, 0x82c90434, 0x82c90434, 0x82c90434,  // 0x48 - 0x4b
    0x80890674, 0x80890674, 0x80890674, 0x80890674,  // 0x4c - 0x4f
    0x06698094, 0x06698094, 0x06698094, 0x06698094,  // 0x50 - 0x53
    0x042982d4, 0x042982d4, 0x042982d4, 0x042982d4,  // 0x54 - 0x57
    0x024984b4, 0x024984b4, 0x024984b4, 0x024984b4,  // 0x58 - 0x5b
    0x000986f4, 0x000986f4, 0x000986f4, 0x000986f4,  // 0x5c - 0x5f
    0x86e90014, 0x86e90014, 0x86e90014, 0x86e90014,  // 0x60 - 0x63
    0x84a90254, 0x84a90254, 0x84a90254, 0x84a90254,  // 0x64 - 0x67
    0x82c90434, 0x82c90434, 0x82c90434, 0x82c90434,  // 0x68 - 0x6b
    0x80890674, 0x80890674, 0x80890674, 0x80890674,  // 0x6c - 0x6f
    0x06698094, 0x06698094, 0x06698094, 0x06698094,  // 0x70 - 0x73
    0x042982d4, 0x042982d4, 0x042982d4, 0x042982d4,  // 0x74 - 0x77
    0x024984b4, 0x024984b4, 0x024984b4, 0x024984b4,  // 0x78 - 0x7b
    0x000986f4, 0x000986f4, 0x000986f4, 0x000986f4,  // 0x7c - 0x7f
    0x86f50008, 0x86f50008, 0x86f50008, 0x86f50008,  // 0x80 - 0x83
    0x84b50248, 0x84b50248, 0x84b50248, 0x84b50248,  // 0x84 - 0x87
    0x82d50428, 0x82d50428, 0x82d50428, 0x82d50428,  // 0x88 - 0x8b
    0x80950668, 0x80950668, 0x80950668, 0x80950668,  // 0x8c - 0x8f
    0x06758088, 0x06758088, 0x06758088, 0x06758088,  // 0x90 - 0x93
    0x043582c8, 0x043582c8, 0x043582c8, 0x043582c8,  // 0x94 - 0x97
    0x025584a8, 0x025584a8, 0x025584a8, 0x025584a8,  // 0x98 - 0x9b
    0x001586e8, 0x001586e8, 0x001586e8, 0x001586e8,  // 0x9c - 0x9f
    0x86f50008, 0x86f50008, 0x86f50008, 0x86f50008,  // 0xa0 - 0xa3
    0x84b50248, 0x84b50248, 0x84b50248, 0x84b50248,  // 0xa4 - 0xa7
    0x82d50428, 0x82d50428, 0x82d50428, 0x82d50428,  // 0xa8 - 0xab
    0x80950668, 0x80950668, 0x80950668, 0x80950668,  // 0xac - 0xaf
    0x06758088, 0x06758088, 0x06758088, 0x06758088,  // 0xb0 - 0xb3
    0x043582c8, 0x043582c8, 0x043582c8, 0x043582c8,  // 0xb4 - 0xb7
    0x025584a8, 0x025584a8, 0x025584a8, 0x025584a8,  // 0xb8 - 0xbb
    0x001586e8, 0x001586e8, 0x001586e8, 0x001586e8,  // 0xbc - 0xbf
    0x86e1001c, 0x86e1001c, 0x86e1001c, 0x86e1001c,  // 0xc0 - 0xc3
    0x84a1025c, 0x84a1025c, 0x84a1025c, 0x84a1025c,  // 0xc4 - 0xc7
    0x82c1043c, 0x82c1043c, 0x82c1043c, 0x82c1043c,  // 0xc8 - 0xcb
    0x8081067c, 0x8081067c, 0x8081067c, 0x8081067c,  // 0xcc - 0xcf
    0x0661809c, 0x0661809c, 0x0661809c, 0x0661809c,  // 0xd0 - 0xd3
    0x042182dc, 0x042182dc, 0x042182dc, 0x042182dc,  // 0xd4 - 0xd7
    0x024184bc, 0x024184bc, 0x024184bc, 0x024184bc,  // 0xd8 - 0xdb
    0x000186fc, 0x000186fc, 0x000186fc, 0x000186fc,  // 0xdc - 0xdf
    0x86e1001c, 0x86e1001c, 0x86e1001c, 0x86e1001c,  // 0xe0 - 0xe3
    0x84a1025c, 0x84a1025c, 0x84a1025c, 0x84a1025c,  // 0xe4 - 0xe7
    0x82c1043c, 0x82c1043c, 0x82c1043c, 0x82c1043c,  // 0xe8 - 0xeb
    0x8081067c, 0x8081067c, 0x8081067c, 0x8081067c,  // 0xec - 0xef
    0x0661809c, 0x0661809c, 0x0661809c, 0x0661809c,  // 0xf0 - 0xf3
    0x042182dc, 0x042182dc, 0x042182dc, 0x042182dc,  // 0xf4 - 0xf7
    0x024184bc, 0x024184bc, 0x024184bc, 0x024184bc,  // 0xf8 - 0xfb
    0x000186fc, 0x000186fc, 0x000186fc, 0x000186fc,  // 0xfc - 0xff
};

const uint32_t color_bssr_table_port_b[] = {
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x00 - 0x03
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x04 - 0x07
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x08 - 0x0b
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x0c - 0x0f
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x10 - 0x13
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x14 - 0x17
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x18 - 0x1b
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x1c - 0x1f
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x20 - 0x23
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x24 - 0x27
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x28 - 0x2b
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x2c - 0x2f
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x30 - 0x33
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x34 - 0x37
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x38 - 0x3b
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x3c - 0x3f
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x40 - 0x43
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x44 - 0x47
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x48 - 0x4b
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x4c - 0x4f
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x50 - 0x53
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x54 - 0x57
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x58 - 0x5b
    0xf4300000, 0x5430a000, 0xa0305400, 0x0030f400,  // 0x5c - 0x5f
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x60 - 0x63
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x64 - 0x67
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x68 - 0x6b
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x6c - 0x6f
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x70 - 0x73
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x74 - 0x77
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x78 - 0x7b
    0xf4200010, 0x5420a010, 0xa0205410, 0x0020f410,  // 0x7c - 0x7f
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0x80 - 0x83
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0x84 - 0x87
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0x88 - 0x8b
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0x8c - 0x8f
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0x90 - 0x93
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0x94 - 0x97
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0x98 - 0x9b
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0x9c - 0x9f
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xa0 - 0xa3
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xa4 - 0xa7
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xa8 - 0xab
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xac - 0xaf
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xb0 - 0xb3
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xb4 - 0xb7
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xb8 - 0xbb
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xbc - 0xbf
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0xc0 - 0xc3
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0xc4 - 0xc7
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0xc8 - 0xcb
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0xcc - 0xcf
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0xd0 - 0xd3
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0xd4 - 0xd7
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0xd8 - 0xdb
    0xf4100020, 0x5410a020, 0xa0105420, 0x0010f420,  // 0xdc - 0xdf
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xe0 - 0xe3
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xe4 - 0xe7
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xe8 - 0xeb
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xec - 0xef
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xf0 - 0xf3
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xf4 - 0xf7
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xf8 - 0xfb
    0xf4000030, 0x5400a030, 0xa0005430, 0x0000f430,  // 0xfc - 0xff
};

}  // namespace bssr_tables